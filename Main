import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.*;
import javax.imageio.*;
import java.io.*;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.util.*;
import java.awt.event.MouseListener; 
import java.awt.event.MouseEvent; 
import javax.swing.JFrame; 
import javax.swing.JPanel; 


public class Main extends JPanel
{
  private int screen = 0;
  private boolean inList = false;
  ArrayList<GoodObj> goodList = new ArrayList<GoodObj>();
  ArrayList<BadObj> badList = new ArrayList<BadObj>();
  ArrayList<Diver> diverList = new ArrayList<Diver>();
  ArrayList<Sentry> sentryList = new ArrayList<Sentry>();
  private Spaceship ship = new Spaceship(300,600,goodList);
  private HUD hud = new HUD(ship);
  Boss1 boss1 = new Boss1(400,-300,badList,ship);
  private boolean isDefeated1 = false;
  BufferedImage background = null;
  
  public Main()
  {
    addKeyListener(new KeyListener() {
      @Override 
      public void keyTyped(KeyEvent e) { 
      }
      @Override 
      public void keyReleased(KeyEvent e) {
        ship.keyReleased(e);
      }
      @Override
      public void keyPressed(KeyEvent e) {
        ship.keyPressed(e);
      }
    }); 
    
    addMouseListener(new MouseListener() {
      @Override
      public void mouseClicked(MouseEvent e) {
      }
      @Override
      public void mouseExited(MouseEvent e) {
      }
      @Override
      public void mouseEntered(MouseEvent e) {
      }
      @Override
      public void mousePressed(MouseEvent e) {
      }
      @Override
      public void mouseReleased(MouseEvent e){
        if(screen == 0)
        {
          if(e.getX()<430 && e.getX()>340 && e.getY()<500 && e.getY()>445)
          {
            screen = 1;
          }
          else if(e.getX()<420 && e.getX()>350 && e.getY()<600 && e.getY()>560)
          {
            screen = 2;
          }
        }
        else if(screen == 2)
        {
          if(e.getX()<125 && e.getX()>50 && e.getY()<100 && e.getY()>60)
          {
            screen = 0;
          }
        }
      }
    });
    
    setFocusable(true);
    goodList.add(ship);
    badList.add(boss1);
    spawn();
    
    try {
      background = ImageIO.read(new File("background.jpg"));
    } catch (IOException e) {
    }
  }
  
  public void paint(Graphics g)
  {
    super.paint(g);
    Graphics2D g2d = (Graphics2D) g;
    g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                         RenderingHints.VALUE_ANTIALIAS_ON);
    g.drawImage(background,0,0,null);
    
    if(screen == 0)
    {
      g.setColor(Color.WHITE); 
      Font font = new Font("Niagara Solid", Font.BOLD, 100);
      g.setFont(font);
      g.drawString("SpaseGame", 240,400);
      font = new Font("Niagara Solid", Font.BOLD, 80);
      g.setFont(font);
      g.drawString("Play", 340, 500);
      font = new Font("Niagara Solid", Font.BOLD, 60);
      g.setFont(font);
      g.drawString("Help", 350, 600);
    }
    
    else if(screen == 1)
    {
      g.setColor(Color.WHITE);
      ship.paint(g2d);
      if(ship.getHealth() <= 0 || ship.getImmune() == true){
        goodList.remove(ship);
        inList = false;
      }
      if(ship.getAlive() == false)
        ship.respawn(true);
      if(ship.getImmune() == false && !inList) {
        goodList.add(ship);
        inList = true;
      }
      
      if(isDefeated1)
        spawn();
      
      for(int i = 0; i < diverList.size(); i++)
      {
        if(diverList.get(i).getY() > 800 || (diverList.get(i).getHealth() <= 0 && diverList.get(i).getBuffer() <= 0))
        {
          diverList.remove(i);
          //powerup spawn point
        }
        else{
          diverList.get(i).paint(g2d);
        }
      }
      for(int i = 0; i < sentryList.size(); i++)
      {
        if(sentryList.get(i).getY() > 800 || (sentryList.get(i).getHealth() <= 0 && sentryList.get(i).getBuffer() <= 0))
        {
          sentryList.remove(i);
        }
        else{
          sentryList.get(i).paint(g2d);
        }
      }
      if(sentryList.size() == 0 && diverList.size() == 0) {
        boss1.setActive(true);
      }
      if(boss1.getActive())
        boss1.paint(g2d);
      hud.update(ship);
      hud.paint(g2d);
    }
    
    if(screen == 2)
    {
      g.setColor(Color.WHITE); 
      Font font = new Font("Niagara Solid", Font.BOLD, 100);
      g.setFont(font);
      g.drawString("Help", 320,100);
      font = new Font("Niagara Solid", Font.BOLD, 60);
      g.setFont(font);
      g.drawString("Back", 50, 100);
      g.drawString("Shoot: spase bar", 260, 350);
      g.drawString("Move: arrow keys", 250, 450);
    }
  }
  
  public void move()
  {
    ship.move();
    if(boss1.getActive())
      boss1.move();
    for(int i = 0; i < diverList.size(); i++)
    {
      diverList.get(i).move();
    }
    for(int i = 0; i < sentryList.size(); i++)
    {
      sentryList.get(i).move();
    }
  }
  
  public void collide()
  {
    int newX;
    int newY;
    int newW;
    int newH;
    for(int i = 0; i < goodList.size(); i++)
    {
      for(int j = 0; j < badList.size(); j++)
      {
        newX = Math.max(goodList.get(i).getX(),badList.get(j).getX());
        newY = Math.max(goodList.get(i).getY(),badList.get(j).getY());
        newW = Math.min(goodList.get(i).getX()+goodList.get(i).getW(),badList.get(j).getX()+badList.get(j).getW()) - Math.max(goodList.get(i).getX(),badList.get(j).getX());
        newH = Math.min(goodList.get(i).getY()+goodList.get(i).getH(),badList.get(j).getY()+badList.get(j).getH()) - Math.max(goodList.get(i).getY(),badList.get(j).getY());
        if(newW < 0 || newH < 0)
        {
          newX = 0;
          newY = 0;
          newW = 0;
          newH = 0;
        }
        if(newW > 0 || newH > 0)
        {
          goodList.get(i).setHealth(badList.get(j).getDMG());
          badList.get(j).setHealth(goodList.get(i).getDMG());
        }
        if(badList.get(j).getHealth() <= 0) {
          if(badList.get(j) == boss1)
            spawn();
          badList.remove(badList.get(j));
        }
      }
      if(goodList.get(i).getHealth() <= 0) {
        if(goodList.get(i) == ship) {
          ship.kill(false);
        }
        goodList.remove(goodList.get(i));
      }
    }
  }
  
  public void spawn()
  {
    for(int i = 5; i > 0; i--)
    {
      double q = 736 * Math.random();
      Diver diver = new Diver((int)q, -240*i, badList);
      diverList.add(diver);
      badList.add(diver);
    }
    for(int i = 2; i > 0; i--)
    {
      double q = 736 * Math.random();
      Sentry sentry = new Sentry((int)q, -240*i, badList);
      sentryList.add(sentry);
      badList.add(sentry);
    }
  }
  
  public static void main (String[] args) throws InterruptedException
  {
     JFrame frame = new JFrame("SpaseGame");
    Main main = new Main();
    frame.add(main); 
    frame.setSize(816,838); 
    frame.setVisible(true);
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    
    while (true)
    {
      if(main.screen == 1)
      {
        main.move();
        main.collide();
      }
      main.repaint();
      Thread.sleep(5);
    }
  }
}
