import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.*;
import javax.imageio.*;
import java.io.*;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.util.*;

public class Boss1 extends BadObj
{
  private int x;
  private int y;
  private int ya = 1;
  private int xa = 0;
  private int health = 10;
  private int dmg = 10;
  private int w = 81;
  private int h = 276;
  private int deathBuffer = 81;
  private int aimBuffer = 400;
  private boolean isDiving = true;
  private boolean isActive = false;
  BufferedImage img = null;
  BufferedImage explode = null;
  BufferedImage[] explosion = new BufferedImage[81];
  ArrayList list;
  Spaceship ship;
  
  public Boss1(int x, int y, ArrayList list, Spaceship ship)
  {
    this.x = x;
    this.y = y;
    this.list = list;
    this.ship = ship;
    try {
      img = ImageIO.read(new File("boss1.png"));
    } catch (IOException e) {
    }
    try {
      explode = ImageIO.read(new File("explosion.png"));
    } catch (IOException e) {
    }
    
    for(int i = 0; i < 9; i++)
    {
      for(int j = 0; j < 9; j++)
      {
        explosion[(i*9) + j] = explode.getSubimage(j*100, i*100, 100, 100);
      }
    }
  }
  
  public void move()
  {
    if(isActive) {
      y += ya;
      x += xa;
    }
  }
  
  public void paint(Graphics g)
  {
    if(isActive) {
      if(health > 0) {
        g.drawImage(img,x,y,null);
        if(y < 0) {
          ya = 1;
          xa = 0;
        }
        else if(y == 0 && aimBuffer > 0) {
          aimBuffer--;
          ya = 0;
          if(ship.getX() + 10 < x + 39)
            xa = -1;
          else if(ship.getX() + 10 > x + 39)
            xa = 1;
          else
            xa = 0;
        }
        else {
          aimBuffer = 400;
          ya = 4;
          xa = 0;
          if(y > 800)
            y = -300;
        }
      }
      else {
        if(deathBuffer == 0)
          isActive = false;
        else {
          g.drawImage(explosion[81 - deathBuffer],x,y,null);
          deathBuffer--;
          ya = 0;
          xa = 0;
        }
      }
    }
  }
  
  public int getX()
  {
    return x + 39;
  }
  
  public int getY()
  {
    return y;
  }
  
  public int getW()
  {
    return w;
  }
  
  public int getH()
  {
    return h;
  }
  
  public int getDMG()
  {
    return dmg;
  }
  
  public int getHealth()
  {
    return health;
  }
  
  public int getBuffer()
  {
    return deathBuffer;
  }
  
  public void setHealth(int health)
  {
    this.health -= health;
  }
  
  public void setX(int x)
  {
    this.x = x;
  }
  
  public void setActive(boolean a)
  {
    isActive = a;
  }
  
  public boolean getActive()
  {
    return isActive;
  }
}
